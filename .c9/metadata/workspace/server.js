{"changed":true,"filter":false,"title":"server.js","tooltip":"/server.js","value":"\nvar express = require('express'); //Express web framework\nvar bcrypt = require('bcrypt');\nvar bodyParser = require(\"body-parser\");\nvar mysql = require(\"mysql\");\nvar con = mysql.createConnection({\n        host: \"localhost\", \n        user: \"stephenkearns1\",\n        password: \"\",\n        database:\"c9\"\n});\nvar jwt = require(\"jsonwebtoken\");\nvar app = express(); //express app\nvar expressSanitizer = require(\"sanitizer\");//sanitizer for input\nvar server; //the server\nvar config = require('./config/config.js'); //get config's for use \napp.use(bodyParser.json()); // for parsing application/json \napp.use(bodyParser.urlencoded({ extended: false })); // for parsing application/x-www-form-urlencoded \n\n//variables\nconst saltRounds = 10;\n\n//Ref testing plan: https://www.sitepoint.com/unit-test-javascript-mocha-chai\n\n//TODO check auth, i.e. check the user token to se if vaild, expired or invailed \n\nfunction CheckAuth(token, callback){\n    /*\n      checks first to see if the token exist in the db,\n      as a firts from of verifying the token was generated by the db.\n      It then decodes token using the server secret to verify it was generated by the server \n    */\n    \n    con.query('SELECT token FROM users WHERE token = ?',[token],function(err, data) {\n        if(err)throw err;\n        else if(data.length === 0){\n            callback('No matchs');\n        }\n        //TODO add secret to file and read it in `\n        jwt.verify(token, config.secret, function(err, decoded) {\n            if (err) {\n                callback('invaild');\n             }\n        });\n    });\n}\n\n\n//test if routing is working at / \napp.get(\"/\", function(req, res) {\n    res.send('Welcome to the medicalApp API! - documentation on using the api, can be found at www.');\n});\n\napp.post('/api/auth/check', function(req, res) {\n    \n    var token = req.body.token;\n    \n    CheckAuth(token, function(res){\n       res.send(res); \n    });\n    \n})\n\napp.post(\"/api/auth/login\", function(req, res){\n  \n  \n     //using postman for testing this technique has to be used \n     var username = req.query.username;\n     var password = req.query.password;\n     \n     //for android this method has to be used to retrive cred's\n     //var username = req.body.username;\n     //var password = req.body.password;\n     \n    \n     \n     if(username === undefined || password === undefined){\n       \n        res.send(\"Invalid credentials\");\n     }\n     \n     //sanitize the input to protect agaisnt XSS\n     username = expressSanitizer.sanitize(username);\n     password = expressSanitizer.sanitize(password);\n     \n     \n     con.query('SELECT * FROM users WHERE username = ?', [username], function(err, data){\n       if(err)\n       {\n         console.log('error occured', err);\n         res.send(\"Could not connect to database to validate username\");\n       }\n       else if(data.length === 0)\n       {\n         //user does not exist\n         console.log('TEST: users does not exist');\n         res.send('user does not exist');\n       }\n        else\n        {\n            //TODO instead of using the password I might generate the token based on the user input\n             //compares user sent and stored password\n             if(!bcrypt.compareSync(password,data[0].password))\n             {\n               console.log('test: Invalid pasword');\n               res.send('Invalid password');\n             }\n               //Generate token\n             var payload = {\n                    id:username,\n                    password:data[0].password\n             };\n               \n            var jwtToken = jwt.sign(payload, config.secret, {expiresIn: '24h' })\n             \n            con.query('INSERT INTO users SET token = ?', jwtToken, function(err) {\n                if(err)throw err;\n                //not sure it will continue after exeption is thrown but I will find out eventually \n                res.send(\"failed to store token\");\n            });\n            \n             //return token to user\n             res.send(jwtToken);\n         \n         \n        }\n\n       \n     });\n     \n     \n     \n});\n\n\n//req stands for the request and res for response to the user \n\napp.post('/register', function(req, res){\n   \n   /*\n      Vaildation:\n      - checks the length of the of password \n      - checks format \n      - Checks if user name already exists \n   */\n   \n   /*\n    //get the users details \n    var idIn = 4;//req.query.id;\n    var firstNameIn = req.query.firstName;\n    var secondNameIn = req.query.secondName;\n    var usernameIn = req.query.username;\n    var passwordIn = req.query.password;\n    var emailIn = req.query.email;\n    var userGoalIn = req.query.goal;\n    //NOTE: the below variables are optional so can be null\n    //I will add defaults to them before making a request so it may not matter serverside\n    var ageIn = req.query.age;\n    var userMedicalConditionIn = req.query.medicalCondition;\n    var conditionLevelIn = req.query.level;\n    \n    \n    */\n    \n       var idIn = 4;//req.query.id;\n    var firstNameIn = req.body.firstname;\n    var secondNameIn = req.body.secondname;\n    var usernameIn = req.body.username;\n    var passwordIn = req.body.password;\n    var emailIn = req.body.email;\n    var userGoalIn = req.body.goal;\n    //NOTE: the below variables are optional so can be null\n    //I will add defaults to them before making a request so it may not matter serverside\n    var ageIn = req.body.age;\n    var userMedicalConditionIn = req.body.medicalCondition;\n    var conditionLevelIn = req.body.level;\n    \n    \n    console.log(req.body);\n    \n    \n    \n    if(idIn === undefined || usernameIn === undefined || passwordIn === undefined \n    || firstNameIn == undefined || secondNameIn == undefined || emailIn == undefined\n    || userGoalIn == undefined || ageIn == undefined || userMedicalConditionIn == undefined\n    ||conditionLevelIn == undefined)\n    {\n        res.send(\"Invalid params!\");\n    }\n    \n    \n    //santize the user's input to clean up dirt strings and protect agaisnt common attacks such as XSS\n    //Good ref for your own info: https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\n    idIn = expressSanitizer.sanitize(idIn);\n    usernameIn = expressSanitizer.sanitize(usernameIn);\n    passwordIn = expressSanitizer.sanitize(passwordIn);\n    firstNameIn = expressSanitizer.sanitize(firstNameIn);\n    secondNameIn = expressSanitizer.sanitize(secondNameIn);\n    emailIn = expressSanitizer.sanitize(emailIn);\n    userGoalIn = expressSanitizer.sanitize(userGoalIn);\n    ageIn = expressSanitizer.sanitize(ageIn);\n    userMedicalConditionIn = expressSanitizer.sanitize(userMedicalConditionIn);\n    conditionLevelIn = expressSanitizer.sanitize(conditionLevelIn);\n    \n    console.log(idIn, usernameIn, passwordIn);\n    passwordIn = bcrypt.hashSync(passwordIn, saltRounds);\n    console.log(passwordIn);\n    \n    if(usernameIn.length < 3){\n        res.send('Invaild username');\n    }\n    \n    if(passwordIn.length < 8){\n        res.send('Invaild password');\n    }\n    /*TODO: need to also ensure email is valid*/\n    con.query('SELECT username FROM users WHERE username = ?', [usernameIn], function(err, data){\n       if(err)\n       {\n         console.log('error occured', err);\n         res.send(\"Could not connect to database to validate username\");\n       }\n       else if(data.length != 0)\n       {\n         res.send('Already taken');\n       }\n       else\n       {\n    \n            var user = {id:idIn, username:usernameIn, password:passwordIn, \n            firstname:firstNameIn, secondname:secondNameIn, age:ageIn, email:emailIn,\n            usergoal:userGoalIn, medicalcondition:userMedicalConditionIn, conditionlevel:conditionLevelIn};\n            \n            con.query('INSERT INTO users SET ?',user,function(err){\n               //if an error occurs throw it \n               if(err){\n                   console.log('Error:', err);\n                   res.send('failed to store data');\n               } \n               else{\n                   res.send('success');\n               }\n       \n               //TODO add conditons for if username exist and other vaildation \n            });\n       }  \n       \n    });\n    \n    \n});\n\nfunction initServer(){\n  //other host 127.0.0.1\n  //port 3306\n  \n     //TODO: Remove cred's from code \n  //creates a connection to the database \n  \n\n  \n  //connects to the database \n  con.connect(function(err){\n     if(err){\n       console.log(\"Error while trying to connect to db\");\n       return;\n     }\n     \n     console.log(\"Connection established\");\n     \n     \n  });\n  \n  \n  \n  //start the server\n  startServer();\n  \n}\n\nfunction startServer(){\n    \n  \nserver = app.listen(process.env.PORT || 3000, process.env.IP || \"0.0.0.0\", function(){\n  var addr = server.address();\n  console.log(\"HealthyLiving server listening @\", addr.address + \":\" + addr.port);\n});\n\n\n}\n\n//init the server \ninitServer();\n\n//export for testing\nexports.app = app;\n\n","undoManager":{"mark":-2,"position":75,"stack":[[{"start":{"row":158,"column":4},"end":{"row":159,"column":0},"action":"insert","lines":["",""],"id":5521},{"start":{"row":159,"column":0},"end":{"row":159,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":159,"column":4},"end":{"row":159,"column":5},"action":"insert","lines":["/"],"id":5522}],[{"start":{"row":159,"column":5},"end":{"row":159,"column":6},"action":"insert","lines":["*"],"id":5523}],[{"start":{"row":159,"column":5},"end":{"row":159,"column":6},"action":"remove","lines":["*"],"id":5524}],[{"start":{"row":159,"column":4},"end":{"row":159,"column":5},"action":"remove","lines":["/"],"id":5525}],[{"start":{"row":144,"column":5},"end":{"row":145,"column":0},"action":"insert","lines":["",""],"id":5526},{"start":{"row":145,"column":0},"end":{"row":145,"column":3},"action":"insert","lines":["   "]}],[{"start":{"row":145,"column":3},"end":{"row":146,"column":0},"action":"insert","lines":["",""],"id":5527},{"start":{"row":146,"column":0},"end":{"row":146,"column":3},"action":"insert","lines":["   "]}],[{"start":{"row":146,"column":3},"end":{"row":146,"column":4},"action":"insert","lines":["/"],"id":5528}],[{"start":{"row":146,"column":4},"end":{"row":146,"column":5},"action":"insert","lines":["*"],"id":5529}],[{"start":{"row":162,"column":5},"end":{"row":162,"column":6},"action":"remove","lines":["*"],"id":5530}],[{"start":{"row":162,"column":4},"end":{"row":162,"column":5},"action":"remove","lines":["/"],"id":5531}],[{"start":{"row":162,"column":4},"end":{"row":162,"column":5},"action":"insert","lines":["*"],"id":5532}],[{"start":{"row":162,"column":5},"end":{"row":162,"column":6},"action":"insert","lines":["/"],"id":5533}],[{"start":{"row":176,"column":5},"end":{"row":176,"column":6},"action":"remove","lines":["/"],"id":5534}],[{"start":{"row":176,"column":4},"end":{"row":176,"column":5},"action":"remove","lines":["*"],"id":5535}],[{"start":{"row":176,"column":4},"end":{"row":176,"column":5},"action":"insert","lines":["2"],"id":5536}],[{"start":{"row":176,"column":4},"end":{"row":176,"column":5},"action":"remove","lines":["2"],"id":5537}],[{"start":{"row":164,"column":36},"end":{"row":164,"column":37},"action":"remove","lines":["N"],"id":5538}],[{"start":{"row":164,"column":36},"end":{"row":164,"column":37},"action":"insert","lines":["n"],"id":5539}],[{"start":{"row":165,"column":38},"end":{"row":165,"column":39},"action":"remove","lines":["N"],"id":5540}],[{"start":{"row":162,"column":5},"end":{"row":162,"column":6},"action":"remove","lines":["/"],"id":5554}],[{"start":{"row":162,"column":4},"end":{"row":162,"column":5},"action":"remove","lines":["*"],"id":5555}],[{"start":{"row":162,"column":4},"end":{"row":162,"column":5},"action":"insert","lines":["/"],"id":5556}],[{"start":{"row":162,"column":5},"end":{"row":162,"column":6},"action":"insert","lines":["*"],"id":5557}],[{"start":{"row":146,"column":4},"end":{"row":146,"column":5},"action":"remove","lines":["*"],"id":5558}],[{"start":{"row":146,"column":3},"end":{"row":146,"column":4},"action":"remove","lines":["/"],"id":5559}],[{"start":{"row":176,"column":4},"end":{"row":176,"column":5},"action":"insert","lines":["*"],"id":5560}],[{"start":{"row":176,"column":5},"end":{"row":176,"column":6},"action":"insert","lines":["/"],"id":5561}],[{"start":{"row":137,"column":7},"end":{"row":137,"column":8},"action":"remove","lines":["t"],"id":5562}],[{"start":{"row":137,"column":6},"end":{"row":137,"column":7},"action":"remove","lines":["s"],"id":5563}],[{"start":{"row":137,"column":5},"end":{"row":137,"column":6},"action":"remove","lines":["o"],"id":5564}],[{"start":{"row":137,"column":4},"end":{"row":137,"column":5},"action":"remove","lines":["p"],"id":5565}],[{"start":{"row":137,"column":4},"end":{"row":137,"column":5},"action":"insert","lines":["g"],"id":5566}],[{"start":{"row":137,"column":5},"end":{"row":137,"column":6},"action":"insert","lines":["e"],"id":5567}],[{"start":{"row":137,"column":6},"end":{"row":137,"column":7},"action":"insert","lines":["t"],"id":5568}],[{"start":{"row":137,"column":6},"end":{"row":137,"column":7},"action":"remove","lines":["t"],"id":5569}],[{"start":{"row":137,"column":5},"end":{"row":137,"column":6},"action":"remove","lines":["e"],"id":5570}],[{"start":{"row":137,"column":4},"end":{"row":137,"column":5},"action":"remove","lines":["g"],"id":5571}],[{"start":{"row":137,"column":4},"end":{"row":137,"column":5},"action":"insert","lines":["p"],"id":5572}],[{"start":{"row":137,"column":5},"end":{"row":137,"column":6},"action":"insert","lines":["o"],"id":5573}],[{"start":{"row":137,"column":6},"end":{"row":137,"column":7},"action":"insert","lines":["s"],"id":5574}],[{"start":{"row":137,"column":7},"end":{"row":137,"column":8},"action":"insert","lines":["t"],"id":5575}],[{"start":{"row":162,"column":5},"end":{"row":162,"column":6},"action":"remove","lines":["*"],"id":5576}],[{"start":{"row":162,"column":4},"end":{"row":162,"column":5},"action":"remove","lines":["/"],"id":5577}],[{"start":{"row":162,"column":4},"end":{"row":162,"column":5},"action":"insert","lines":["*"],"id":5578}],[{"start":{"row":162,"column":5},"end":{"row":162,"column":6},"action":"insert","lines":["/"],"id":5579}],[{"start":{"row":146,"column":3},"end":{"row":146,"column":4},"action":"insert","lines":["/"],"id":5580}],[{"start":{"row":146,"column":4},"end":{"row":146,"column":5},"action":"insert","lines":["*"],"id":5581}],[{"start":{"row":162,"column":6},"end":{"row":163,"column":0},"action":"insert","lines":["",""],"id":5582},{"start":{"row":163,"column":0},"end":{"row":163,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":163,"column":4},"end":{"row":163,"column":5},"action":"insert","lines":["/"],"id":5583}],[{"start":{"row":163,"column":5},"end":{"row":163,"column":6},"action":"insert","lines":["*"],"id":5584}],[{"start":{"row":177,"column":5},"end":{"row":177,"column":6},"action":"remove","lines":["/"],"id":5585}],[{"start":{"row":177,"column":4},"end":{"row":177,"column":5},"action":"remove","lines":["*"],"id":5586}],[{"start":{"row":163,"column":5},"end":{"row":163,"column":6},"action":"remove","lines":["*"],"id":5587}],[{"start":{"row":163,"column":4},"end":{"row":163,"column":5},"action":"remove","lines":["/"],"id":5588}],[{"start":{"row":177,"column":4},"end":{"row":178,"column":0},"action":"insert","lines":["",""],"id":5589},{"start":{"row":178,"column":0},"end":{"row":178,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":178,"column":4},"end":{"row":178,"column":5},"action":"insert","lines":["c"],"id":5590}],[{"start":{"row":178,"column":5},"end":{"row":178,"column":6},"action":"insert","lines":["o"],"id":5591}],[{"start":{"row":178,"column":6},"end":{"row":178,"column":7},"action":"insert","lines":["n"],"id":5592}],[{"start":{"row":178,"column":7},"end":{"row":178,"column":8},"action":"insert","lines":["s"],"id":5593}],[{"start":{"row":178,"column":8},"end":{"row":178,"column":9},"action":"insert","lines":["o"],"id":5594}],[{"start":{"row":178,"column":9},"end":{"row":178,"column":10},"action":"insert","lines":["l"],"id":5595}],[{"start":{"row":178,"column":10},"end":{"row":178,"column":11},"action":"insert","lines":["e"],"id":5596}],[{"start":{"row":178,"column":11},"end":{"row":178,"column":12},"action":"insert","lines":["."],"id":5597}],[{"start":{"row":178,"column":12},"end":{"row":178,"column":13},"action":"insert","lines":["l"],"id":5598}],[{"start":{"row":178,"column":13},"end":{"row":178,"column":14},"action":"insert","lines":["o"],"id":5599}],[{"start":{"row":178,"column":14},"end":{"row":178,"column":15},"action":"insert","lines":["g"],"id":5600}],[{"start":{"row":178,"column":12},"end":{"row":178,"column":15},"action":"remove","lines":["log"],"id":5601},{"start":{"row":178,"column":12},"end":{"row":178,"column":17},"action":"insert","lines":["log()"]}],[{"start":{"row":178,"column":16},"end":{"row":178,"column":17},"action":"insert","lines":["r"],"id":5602}],[{"start":{"row":178,"column":17},"end":{"row":178,"column":18},"action":"insert","lines":["e"],"id":5603}],[{"start":{"row":178,"column":16},"end":{"row":178,"column":18},"action":"remove","lines":["re"],"id":5604},{"start":{"row":178,"column":16},"end":{"row":178,"column":19},"action":"insert","lines":["req"]}],[{"start":{"row":178,"column":19},"end":{"row":178,"column":20},"action":"insert","lines":["."],"id":5605}],[{"start":{"row":178,"column":20},"end":{"row":178,"column":21},"action":"insert","lines":["b"],"id":5606}],[{"start":{"row":178,"column":20},"end":{"row":178,"column":21},"action":"remove","lines":["b"],"id":5607},{"start":{"row":178,"column":20},"end":{"row":178,"column":24},"action":"insert","lines":["body"]}],[{"start":{"row":178,"column":25},"end":{"row":178,"column":26},"action":"insert","lines":[";"],"id":5627}],[{"start":{"row":166,"column":38},"end":{"row":166,"column":39},"action":"insert","lines":["n"],"id":5628}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":53,"column":10},"end":{"row":53,"column":25},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1488738675175}